# OpenSearch 운영 환경 구성 가이드

## 🤔 왜 별도 OpenSearch 인스턴스가 필요한가?

### 로컬 개발 환경 vs 클라우드 프로덕션 환경의 차이

#### 로컬 PC (개발 환경):
- docker-compose.yml에 OpenSearch 서비스 정의됨
- `docker-compose up`으로 로컬에서 OpenSearch 실행
- 개발할 때만 사용하는 임시 환경
- 모든 서비스가 같은 네트워크에서 실행

#### 클라우드 프로덕션 환경 (Cloud Run):
- Cloud Run은 **stateless 컨테이너** 서비스
- 각 컨테이너는 독립적으로 실행되며 데이터베이스나 검색엔진을 내장할 수 없음
- OpenSearch는 **별도의 인프라**가 필요
- 데이터 영속성과 확장성을 위해 관리형 서비스 사용

## 🚫 왜 자동 배포가 안 되는가?

### 1. Cloud Run의 한계:
- 하나의 컨테이너만 실행 가능
- 여러 서비스(FastAPI + OpenSearch)를 함께 실행할 수 없음
- 영구 스토리지 제한
- 컨테이너 재시작 시 데이터 손실 위험

### 2. docker-compose vs 프로덕션 구조:

```yaml
# 로컬 개발용 (docker-compose.yml)
services:
  backend:     # FastAPI 서비스
  opensearch:  # 같은 네트워크에서 실행
  dashboards:  # OpenSearch 대시보드
```

```
# 클라우드 프로덕션 구조
Cloud Run (backend) ─────► 별도 OpenSearch 인스턴스 (GCE)
                          ↑
                    독립적인 네트워크 연결
```

## ✅ 현재 구현된 해결 방안

### 별도 OpenSearch 인스턴스 구성:
- **인스턴스**: opensearch-dev (e2-medium)
- **외부 IP**: 34.64.90.182
- **OpenSearch URL**: http://34.64.90.182:9200
- **상태**: GREEN (정상 동작 중)
- **보안**: 개발 환경용으로 보안 비활성화

### 장점:
- ✅ 안정적이고 확장 가능
- ✅ 데이터 영속성 보장
- ✅ Cloud Run과 독립적으로 운영
- ✅ 서비스 간 분리로 장애 영향 최소화

### 단점:
- ❌ 추가 비용 발생 (GCE 인스턴스)
- ❌ 별도 관리 필요

## 🔄 대안 솔루션들

### 1. Google Cloud Memorystore (Elasticsearch)
```yaml
# GitHub Actions에서
- name: Deploy with managed search
  env:
    OPENSEARCH_HOST: ${{ secrets.ELASTICSEARCH_ENDPOINT }}
```
- 완전 관리형 서비스
- 자동 백업, 확장
- 높은 비용

### 2. 내장형 검색 (SQLite FTS)
```python
# 간단한 검색만 필요하다면
import sqlite3
# SQLite Full-Text Search 사용
```
- 비용 없음
- 제한된 검색 기능
- 확장성 부족

### 3. Google Cloud SQL + PostgreSQL
```python
# PostgreSQL의 Full-Text Search 기능 활용
```
- 관리형 데이터베이스
- 기본적인 텍스트 검색
- OpenSearch보다 검색 기능 제한

## 📋 현재 환경 구성 정보

### OpenSearch 인스턴스:
- **프로젝트**: ragp-472304
- **지역**: asia-northeast3-a
- **머신 타입**: e2-medium (개발용)
- **디스크**: 20GB
- **네트워크**: 기본 VPC
- **방화벽**: 포트 9200, 9300, SSH 허용

### Cloud Run 환경 변수:
```bash
ENVIRONMENT=production
OPENSEARCH_HOST=34.64.90.182
OPENSEARCH_PORT=9200
OPENSEARCH_USERNAME=admin
OPENSEARCH_PASSWORD=admin
OPENAI_API_KEY=${secrets.OPENAI_API_KEY}
```

### Docker 컨테이너 설정:
```bash
docker run -d \
  --name opensearch-node \
  --restart unless-stopped \
  -p 9200:9200 \
  -p 9600:9600 \
  -e 'discovery.type=single-node' \
  -e 'plugins.security.disabled=true' \
  -e 'bootstrap.memory_lock=false' \
  -e 'OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m' \
  opensearchproject/opensearch:2.11.1
```

## 🎯 결론 및 권장사항

### 현재 방식이 올바른 이유:
1. **클라우드 네이티브 아키텍처**: 각 서비스가 독립적으로 확장 가능
2. **데이터 영속성**: 컨테이너 재시작과 무관하게 데이터 보존
3. **장애 격리**: 한 서비스 장애가 다른 서비스에 영향 최소화
4. **운영 안정성**: 관리형 인프라의 이점

### 일반적인 클라우드 패턴:
- **로컬 개발**: docker-compose로 편의성 우선
- **프로덕션**: 관리형 서비스로 안정성 우선
- **마이크로서비스**: 각 컴포넌트 독립 배포

### 향후 개선 방안:
1. **모니터링 추가**: CloudWatch, Prometheus 등
2. **백업 자동화**: 정기적인 OpenSearch 데이터 백업
3. **보안 강화**: VPC 내부 통신으로 제한
4. **로드밸런싱**: 트래픽 증가 시 다중 인스턴스 구성

## 📞 문제 해결

### OpenSearch 상태 확인:
```bash
curl http://34.64.90.182:9200/_cluster/health?pretty
```

### 컨테이너 상태 확인:
```bash
gcloud compute ssh opensearch-dev --zone=asia-northeast3-a --command="sudo docker ps"
```

### 로그 확인:
```bash
gcloud compute ssh opensearch-dev --zone=asia-northeast3-a --command="sudo docker logs opensearch-node"
```

---
작성일: 2025-09-17
작성자: Claude AI Assistant